/** Function to create arbitrary terms within the 'The OWL 2 Schema vocabulary (OWL 2)' ontology */
export declare const ns: import("@ontologies/core").Namespace;
/** The class of collections of pairwise different individuals. */
export declare const AllDifferent: import("@ontologies/core").NamedNode;
/** The class of collections of pairwise disjoint classes. */
export declare const AllDisjointClasses: import("@ontologies/core").NamedNode;
/** The class of collections of pairwise disjoint properties. */
export declare const AllDisjointProperties: import("@ontologies/core").NamedNode;
/** The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object. */
export declare const Annotation: import("@ontologies/core").NamedNode;
/** The class of annotation properties. */
export declare const AnnotationProperty: import("@ontologies/core").NamedNode;
/** The class of asymmetric properties. */
export declare const AsymmetricProperty: import("@ontologies/core").NamedNode;
/** The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object. */
export declare const Axiom: import("@ontologies/core").NamedNode;
/** The class of OWL classes. */
export declare const Class: import("@ontologies/core").NamedNode;
/** The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead. */
export declare const DataRange: import("@ontologies/core").NamedNode;
/** The class of data properties. */
export declare const DatatypeProperty: import("@ontologies/core").NamedNode;
/** The class of deprecated classes. */
export declare const DeprecatedClass: import("@ontologies/core").NamedNode;
/** The class of deprecated properties. */
export declare const DeprecatedProperty: import("@ontologies/core").NamedNode;
/** The class of functional properties. */
export declare const FunctionalProperty: import("@ontologies/core").NamedNode;
/** The class of inverse-functional properties. */
export declare const InverseFunctionalProperty: import("@ontologies/core").NamedNode;
/** The class of irreflexive properties. */
export declare const IrreflexiveProperty: import("@ontologies/core").NamedNode;
/** The class of named individuals. */
export declare const NamedIndividual: import("@ontologies/core").NamedNode;
/** The class of negative property assertions. */
export declare const NegativePropertyAssertion: import("@ontologies/core").NamedNode;
/** This is the empty class. */
export declare const Nothing: import("@ontologies/core").NamedNode;
/** The class of object properties. */
export declare const ObjectProperty: import("@ontologies/core").NamedNode;
/** The class of ontologies. */
export declare const Ontology: import("@ontologies/core").NamedNode;
/** The class of ontology properties. */
export declare const OntologyProperty: import("@ontologies/core").NamedNode;
/** The class of reflexive properties. */
export declare const ReflexiveProperty: import("@ontologies/core").NamedNode;
/** The class of property restrictions. */
export declare const Restriction: import("@ontologies/core").NamedNode;
/** The class of symmetric properties. */
export declare const SymmetricProperty: import("@ontologies/core").NamedNode;
/** The class of transitive properties. */
export declare const TransitiveProperty: import("@ontologies/core").NamedNode;
/** The class of OWL individuals. */
export declare const Thing: import("@ontologies/core").NamedNode;
/** The property that determines the class that a universal property restriction refers to. */
export declare const allValuesFrom: import("@ontologies/core").NamedNode;
/** The property that determines the predicate of an annotated axiom or annotated annotation. */
export declare const annotatedProperty: import("@ontologies/core").NamedNode;
/** The property that determines the subject of an annotated axiom or annotated annotation. */
export declare const annotatedSource: import("@ontologies/core").NamedNode;
/** The property that determines the object of an annotated axiom or annotated annotation. */
export declare const annotatedTarget: import("@ontologies/core").NamedNode;
/** The property that determines the predicate of a negative property assertion. */
export declare const assertionProperty: import("@ontologies/core").NamedNode;
/** The data property that does not relate any individual to any data value. */
export declare const bottomDataProperty: import("@ontologies/core").NamedNode;
/** The object property that does not relate any two individuals. */
export declare const bottomObjectProperty: import("@ontologies/core").NamedNode;
/** The property that determines the cardinality of an exact cardinality restriction. */
export declare const cardinality: import("@ontologies/core").NamedNode;
/** The property that determines that a given class is the complement of another class. */
export declare const complementOf: import("@ontologies/core").NamedNode;
/** The property that determines that a given data range is the complement of another data range with respect to the data domain. */
export declare const datatypeComplementOf: import("@ontologies/core").NamedNode;
/** The property that determines that two given individuals are different. */
export declare const differentFrom: import("@ontologies/core").NamedNode;
/** The property that determines that a given class is equivalent to the disjoint union of a collection of other classes. */
export declare const disjointUnionOf: import("@ontologies/core").NamedNode;
/** The property that determines that two given classes are disjoint. */
export declare const disjointWith: import("@ontologies/core").NamedNode;
/** The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom. */
export declare const distinctMembers: import("@ontologies/core").NamedNode;
/** The property that determines that two given classes are equivalent, and that is used to specify datatype definitions. */
export declare const equivalentClass: import("@ontologies/core").NamedNode;
/** The property that determines that two given properties are equivalent. */
export declare const equivalentProperty: import("@ontologies/core").NamedNode;
/** The property that determines the collection of properties that jointly build a key. */
export declare const hasKey: import("@ontologies/core").NamedNode;
/** The property that determines the property that a self restriction refers to. */
export declare const hasSelf: import("@ontologies/core").NamedNode;
/** The property that determines the individual that a has-value restriction refers to. */
export declare const hasValue: import("@ontologies/core").NamedNode;
/** The property that determines the collection of classes or data ranges that build an intersection. */
export declare const intersectionOf: import("@ontologies/core").NamedNode;
/** The property that determines that two given properties are inverse. */
export declare const inverseOf: import("@ontologies/core").NamedNode;
/** The property that determines the cardinality of a maximum cardinality restriction. */
export declare const maxCardinality: import("@ontologies/core").NamedNode;
/** The property that determines the cardinality of a maximum qualified cardinality restriction. */
export declare const maxQualifiedCardinality: import("@ontologies/core").NamedNode;
/** The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom. */
export declare const members: import("@ontologies/core").NamedNode;
/** The property that determines the cardinality of a minimum cardinality restriction. */
export declare const minCardinality: import("@ontologies/core").NamedNode;
/** The property that determines the cardinality of a minimum qualified cardinality restriction. */
export declare const minQualifiedCardinality: import("@ontologies/core").NamedNode;
/** The property that determines the class that a qualified object cardinality restriction refers to. */
export declare const onClass: import("@ontologies/core").NamedNode;
/** The property that determines the data range that a qualified data cardinality restriction refers to. */
export declare const onDataRange: import("@ontologies/core").NamedNode;
/** The property that determines the datatype that a datatype restriction refers to. */
export declare const onDatatype: import("@ontologies/core").NamedNode;
/** The property that determines the collection of individuals or data values that build an enumeration. */
export declare const oneOf: import("@ontologies/core").NamedNode;
/** The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to. */
export declare const onProperties: import("@ontologies/core").NamedNode;
/** The property that determines the property that a property restriction refers to. */
export declare const onProperty: import("@ontologies/core").NamedNode;
/** The property that determines the n-tuple of properties that build a sub property chain of a given property. */
export declare const propertyChainAxiom: import("@ontologies/core").NamedNode;
/** The property that determines that two given properties are disjoint. */
export declare const propertyDisjointWith: import("@ontologies/core").NamedNode;
/** The property that determines the cardinality of an exact qualified cardinality restriction. */
export declare const qualifiedCardinality: import("@ontologies/core").NamedNode;
/** The property that determines that two given individuals are equal. */
export declare const sameAs: import("@ontologies/core").NamedNode;
/** The property that determines the class that an existential property restriction refers to. */
export declare const someValuesFrom: import("@ontologies/core").NamedNode;
/** The property that determines the subject of a negative property assertion. */
export declare const sourceIndividual: import("@ontologies/core").NamedNode;
/** The property that determines the object of a negative object property assertion. */
export declare const targetIndividual: import("@ontologies/core").NamedNode;
/** The property that determines the value of a negative data property assertion. */
export declare const targetValue: import("@ontologies/core").NamedNode;
/** The data property that relates every individual to every data value. */
export declare const topDataProperty: import("@ontologies/core").NamedNode;
/** The object property that relates every two individuals. */
export declare const topObjectProperty: import("@ontologies/core").NamedNode;
/** The property that determines the collection of classes or data ranges that build a union. */
export declare const unionOf: import("@ontologies/core").NamedNode;
/** The property that determines the collection of facet-value pairs that define a datatype restriction. */
export declare const withRestrictions: import("@ontologies/core").NamedNode;
/** The annotation property that indicates that a given ontology is backward compatible with another ontology. */
export declare const backwardCompatibleWith: import("@ontologies/core").NamedNode;
/** The annotation property that indicates that a given entity has been deprecated. */
export declare const deprecated: import("@ontologies/core").NamedNode;
/** The property that is used for importing other ontologies into a given ontology. */
export declare const imports: import("@ontologies/core").NamedNode;
/** The annotation property that indicates that a given ontology is incompatible with another ontology. */
export declare const incompatibleWith: import("@ontologies/core").NamedNode;
/** The annotation property that indicates the predecessor ontology of a given ontology. */
export declare const priorVersion: import("@ontologies/core").NamedNode;
/** The annotation property that provides version information for an ontology or another OWL construct. */
export declare const versionInfo: import("@ontologies/core").NamedNode;
/** The property that identifies the version IRI of an ontology. */
export declare const versionIRI: import("@ontologies/core").NamedNode;
declare const _default: {
    /** Function to create arbitrary terms within the 'The OWL 2 Schema vocabulary (OWL 2)' ontology */
    ns: import("@ontologies/core").Namespace;
    /** The class of collections of pairwise different individuals. */
    AllDifferent: import("@ontologies/core").NamedNode;
    /** The class of collections of pairwise disjoint classes. */
    AllDisjointClasses: import("@ontologies/core").NamedNode;
    /** The class of collections of pairwise disjoint properties. */
    AllDisjointProperties: import("@ontologies/core").NamedNode;
    /** The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object. */
    Annotation: import("@ontologies/core").NamedNode;
    /** The class of annotation properties. */
    AnnotationProperty: import("@ontologies/core").NamedNode;
    /** The class of asymmetric properties. */
    AsymmetricProperty: import("@ontologies/core").NamedNode;
    /** The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object. */
    Axiom: import("@ontologies/core").NamedNode;
    /** The class of OWL classes. */
    Class: import("@ontologies/core").NamedNode;
    /** The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead. */
    DataRange: import("@ontologies/core").NamedNode;
    /** The class of data properties. */
    DatatypeProperty: import("@ontologies/core").NamedNode;
    /** The class of deprecated classes. */
    DeprecatedClass: import("@ontologies/core").NamedNode;
    /** The class of deprecated properties. */
    DeprecatedProperty: import("@ontologies/core").NamedNode;
    /** The class of functional properties. */
    FunctionalProperty: import("@ontologies/core").NamedNode;
    /** The class of inverse-functional properties. */
    InverseFunctionalProperty: import("@ontologies/core").NamedNode;
    /** The class of irreflexive properties. */
    IrreflexiveProperty: import("@ontologies/core").NamedNode;
    /** The class of named individuals. */
    NamedIndividual: import("@ontologies/core").NamedNode;
    /** The class of negative property assertions. */
    NegativePropertyAssertion: import("@ontologies/core").NamedNode;
    /** This is the empty class. */
    Nothing: import("@ontologies/core").NamedNode;
    /** The class of object properties. */
    ObjectProperty: import("@ontologies/core").NamedNode;
    /** The class of ontologies. */
    Ontology: import("@ontologies/core").NamedNode;
    /** The class of ontology properties. */
    OntologyProperty: import("@ontologies/core").NamedNode;
    /** The class of reflexive properties. */
    ReflexiveProperty: import("@ontologies/core").NamedNode;
    /** The class of property restrictions. */
    Restriction: import("@ontologies/core").NamedNode;
    /** The class of symmetric properties. */
    SymmetricProperty: import("@ontologies/core").NamedNode;
    /** The class of transitive properties. */
    TransitiveProperty: import("@ontologies/core").NamedNode;
    /** The class of OWL individuals. */
    Thing: import("@ontologies/core").NamedNode;
    /** The property that determines the class that a universal property restriction refers to. */
    allValuesFrom: import("@ontologies/core").NamedNode;
    /** The property that determines the predicate of an annotated axiom or annotated annotation. */
    annotatedProperty: import("@ontologies/core").NamedNode;
    /** The property that determines the subject of an annotated axiom or annotated annotation. */
    annotatedSource: import("@ontologies/core").NamedNode;
    /** The property that determines the object of an annotated axiom or annotated annotation. */
    annotatedTarget: import("@ontologies/core").NamedNode;
    /** The property that determines the predicate of a negative property assertion. */
    assertionProperty: import("@ontologies/core").NamedNode;
    /** The data property that does not relate any individual to any data value. */
    bottomDataProperty: import("@ontologies/core").NamedNode;
    /** The object property that does not relate any two individuals. */
    bottomObjectProperty: import("@ontologies/core").NamedNode;
    /** The property that determines the cardinality of an exact cardinality restriction. */
    cardinality: import("@ontologies/core").NamedNode;
    /** The property that determines that a given class is the complement of another class. */
    complementOf: import("@ontologies/core").NamedNode;
    /** The property that determines that a given data range is the complement of another data range with respect to the data domain. */
    datatypeComplementOf: import("@ontologies/core").NamedNode;
    /** The property that determines that two given individuals are different. */
    differentFrom: import("@ontologies/core").NamedNode;
    /** The property that determines that a given class is equivalent to the disjoint union of a collection of other classes. */
    disjointUnionOf: import("@ontologies/core").NamedNode;
    /** The property that determines that two given classes are disjoint. */
    disjointWith: import("@ontologies/core").NamedNode;
    /** The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom. */
    distinctMembers: import("@ontologies/core").NamedNode;
    /** The property that determines that two given classes are equivalent, and that is used to specify datatype definitions. */
    equivalentClass: import("@ontologies/core").NamedNode;
    /** The property that determines that two given properties are equivalent. */
    equivalentProperty: import("@ontologies/core").NamedNode;
    /** The property that determines the collection of properties that jointly build a key. */
    hasKey: import("@ontologies/core").NamedNode;
    /** The property that determines the property that a self restriction refers to. */
    hasSelf: import("@ontologies/core").NamedNode;
    /** The property that determines the individual that a has-value restriction refers to. */
    hasValue: import("@ontologies/core").NamedNode;
    /** The property that determines the collection of classes or data ranges that build an intersection. */
    intersectionOf: import("@ontologies/core").NamedNode;
    /** The property that determines that two given properties are inverse. */
    inverseOf: import("@ontologies/core").NamedNode;
    /** The property that determines the cardinality of a maximum cardinality restriction. */
    maxCardinality: import("@ontologies/core").NamedNode;
    /** The property that determines the cardinality of a maximum qualified cardinality restriction. */
    maxQualifiedCardinality: import("@ontologies/core").NamedNode;
    /** The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom. */
    members: import("@ontologies/core").NamedNode;
    /** The property that determines the cardinality of a minimum cardinality restriction. */
    minCardinality: import("@ontologies/core").NamedNode;
    /** The property that determines the cardinality of a minimum qualified cardinality restriction. */
    minQualifiedCardinality: import("@ontologies/core").NamedNode;
    /** The property that determines the class that a qualified object cardinality restriction refers to. */
    onClass: import("@ontologies/core").NamedNode;
    /** The property that determines the data range that a qualified data cardinality restriction refers to. */
    onDataRange: import("@ontologies/core").NamedNode;
    /** The property that determines the datatype that a datatype restriction refers to. */
    onDatatype: import("@ontologies/core").NamedNode;
    /** The property that determines the collection of individuals or data values that build an enumeration. */
    oneOf: import("@ontologies/core").NamedNode;
    /** The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to. */
    onProperties: import("@ontologies/core").NamedNode;
    /** The property that determines the property that a property restriction refers to. */
    onProperty: import("@ontologies/core").NamedNode;
    /** The property that determines the n-tuple of properties that build a sub property chain of a given property. */
    propertyChainAxiom: import("@ontologies/core").NamedNode;
    /** The property that determines that two given properties are disjoint. */
    propertyDisjointWith: import("@ontologies/core").NamedNode;
    /** The property that determines the cardinality of an exact qualified cardinality restriction. */
    qualifiedCardinality: import("@ontologies/core").NamedNode;
    /** The property that determines that two given individuals are equal. */
    sameAs: import("@ontologies/core").NamedNode;
    /** The property that determines the class that an existential property restriction refers to. */
    someValuesFrom: import("@ontologies/core").NamedNode;
    /** The property that determines the subject of a negative property assertion. */
    sourceIndividual: import("@ontologies/core").NamedNode;
    /** The property that determines the object of a negative object property assertion. */
    targetIndividual: import("@ontologies/core").NamedNode;
    /** The property that determines the value of a negative data property assertion. */
    targetValue: import("@ontologies/core").NamedNode;
    /** The data property that relates every individual to every data value. */
    topDataProperty: import("@ontologies/core").NamedNode;
    /** The object property that relates every two individuals. */
    topObjectProperty: import("@ontologies/core").NamedNode;
    /** The property that determines the collection of classes or data ranges that build a union. */
    unionOf: import("@ontologies/core").NamedNode;
    /** The property that determines the collection of facet-value pairs that define a datatype restriction. */
    withRestrictions: import("@ontologies/core").NamedNode;
    /** The annotation property that indicates that a given ontology is backward compatible with another ontology. */
    backwardCompatibleWith: import("@ontologies/core").NamedNode;
    /** The annotation property that indicates that a given entity has been deprecated. */
    deprecated: import("@ontologies/core").NamedNode;
    /** The property that is used for importing other ontologies into a given ontology. */
    imports: import("@ontologies/core").NamedNode;
    /** The annotation property that indicates that a given ontology is incompatible with another ontology. */
    incompatibleWith: import("@ontologies/core").NamedNode;
    /** The annotation property that indicates the predecessor ontology of a given ontology. */
    priorVersion: import("@ontologies/core").NamedNode;
    /** The annotation property that provides version information for an ontology or another OWL construct. */
    versionInfo: import("@ontologies/core").NamedNode;
    /** The property that identifies the version IRI of an ontology. */
    versionIRI: import("@ontologies/core").NamedNode;
};
export default _default;
