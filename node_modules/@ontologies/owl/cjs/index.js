"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@ontologies/core");
/** Function to create arbitrary terms within the 'The OWL 2 Schema vocabulary (OWL 2)' ontology */
exports.ns = core_1.createNS("http://www.w3.org/2002/07/owl#");
/** The class of collections of pairwise different individuals. */
exports.AllDifferent = exports.ns("AllDifferent");
/** The class of collections of pairwise disjoint classes. */
exports.AllDisjointClasses = exports.ns("AllDisjointClasses");
/** The class of collections of pairwise disjoint properties. */
exports.AllDisjointProperties = exports.ns("AllDisjointProperties");
/** The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object. */
exports.Annotation = exports.ns("Annotation");
/** The class of annotation properties. */
exports.AnnotationProperty = exports.ns("AnnotationProperty");
/** The class of asymmetric properties. */
exports.AsymmetricProperty = exports.ns("AsymmetricProperty");
/** The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object. */
exports.Axiom = exports.ns("Axiom");
/** The class of OWL classes. */
exports.Class = exports.ns("Class");
/** The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead. */
exports.DataRange = exports.ns("DataRange");
/** The class of data properties. */
exports.DatatypeProperty = exports.ns("DatatypeProperty");
/** The class of deprecated classes. */
exports.DeprecatedClass = exports.ns("DeprecatedClass");
/** The class of deprecated properties. */
exports.DeprecatedProperty = exports.ns("DeprecatedProperty");
/** The class of functional properties. */
exports.FunctionalProperty = exports.ns("FunctionalProperty");
/** The class of inverse-functional properties. */
exports.InverseFunctionalProperty = exports.ns("InverseFunctionalProperty");
/** The class of irreflexive properties. */
exports.IrreflexiveProperty = exports.ns("IrreflexiveProperty");
/** The class of named individuals. */
exports.NamedIndividual = exports.ns("NamedIndividual");
/** The class of negative property assertions. */
exports.NegativePropertyAssertion = exports.ns("NegativePropertyAssertion");
/** This is the empty class. */
exports.Nothing = exports.ns("Nothing");
/** The class of object properties. */
exports.ObjectProperty = exports.ns("ObjectProperty");
/** The class of ontologies. */
exports.Ontology = exports.ns("Ontology");
/** The class of ontology properties. */
exports.OntologyProperty = exports.ns("OntologyProperty");
/** The class of reflexive properties. */
exports.ReflexiveProperty = exports.ns("ReflexiveProperty");
/** The class of property restrictions. */
exports.Restriction = exports.ns("Restriction");
/** The class of symmetric properties. */
exports.SymmetricProperty = exports.ns("SymmetricProperty");
/** The class of transitive properties. */
exports.TransitiveProperty = exports.ns("TransitiveProperty");
/** The class of OWL individuals. */
exports.Thing = exports.ns("Thing");
/** The property that determines the class that a universal property restriction refers to. */
exports.allValuesFrom = exports.ns("allValuesFrom");
/** The property that determines the predicate of an annotated axiom or annotated annotation. */
exports.annotatedProperty = exports.ns("annotatedProperty");
/** The property that determines the subject of an annotated axiom or annotated annotation. */
exports.annotatedSource = exports.ns("annotatedSource");
/** The property that determines the object of an annotated axiom or annotated annotation. */
exports.annotatedTarget = exports.ns("annotatedTarget");
/** The property that determines the predicate of a negative property assertion. */
exports.assertionProperty = exports.ns("assertionProperty");
/** The data property that does not relate any individual to any data value. */
exports.bottomDataProperty = exports.ns("bottomDataProperty");
/** The object property that does not relate any two individuals. */
exports.bottomObjectProperty = exports.ns("bottomObjectProperty");
/** The property that determines the cardinality of an exact cardinality restriction. */
exports.cardinality = exports.ns("cardinality");
/** The property that determines that a given class is the complement of another class. */
exports.complementOf = exports.ns("complementOf");
/** The property that determines that a given data range is the complement of another data range with respect to the data domain. */
exports.datatypeComplementOf = exports.ns("datatypeComplementOf");
/** The property that determines that two given individuals are different. */
exports.differentFrom = exports.ns("differentFrom");
/** The property that determines that a given class is equivalent to the disjoint union of a collection of other classes. */
exports.disjointUnionOf = exports.ns("disjointUnionOf");
/** The property that determines that two given classes are disjoint. */
exports.disjointWith = exports.ns("disjointWith");
/** The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom. */
exports.distinctMembers = exports.ns("distinctMembers");
/** The property that determines that two given classes are equivalent, and that is used to specify datatype definitions. */
exports.equivalentClass = exports.ns("equivalentClass");
/** The property that determines that two given properties are equivalent. */
exports.equivalentProperty = exports.ns("equivalentProperty");
/** The property that determines the collection of properties that jointly build a key. */
exports.hasKey = exports.ns("hasKey");
/** The property that determines the property that a self restriction refers to. */
exports.hasSelf = exports.ns("hasSelf");
/** The property that determines the individual that a has-value restriction refers to. */
exports.hasValue = exports.ns("hasValue");
/** The property that determines the collection of classes or data ranges that build an intersection. */
exports.intersectionOf = exports.ns("intersectionOf");
/** The property that determines that two given properties are inverse. */
exports.inverseOf = exports.ns("inverseOf");
/** The property that determines the cardinality of a maximum cardinality restriction. */
exports.maxCardinality = exports.ns("maxCardinality");
/** The property that determines the cardinality of a maximum qualified cardinality restriction. */
exports.maxQualifiedCardinality = exports.ns("maxQualifiedCardinality");
/** The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom. */
exports.members = exports.ns("members");
/** The property that determines the cardinality of a minimum cardinality restriction. */
exports.minCardinality = exports.ns("minCardinality");
/** The property that determines the cardinality of a minimum qualified cardinality restriction. */
exports.minQualifiedCardinality = exports.ns("minQualifiedCardinality");
/** The property that determines the class that a qualified object cardinality restriction refers to. */
exports.onClass = exports.ns("onClass");
/** The property that determines the data range that a qualified data cardinality restriction refers to. */
exports.onDataRange = exports.ns("onDataRange");
/** The property that determines the datatype that a datatype restriction refers to. */
exports.onDatatype = exports.ns("onDatatype");
/** The property that determines the collection of individuals or data values that build an enumeration. */
exports.oneOf = exports.ns("oneOf");
/** The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to. */
exports.onProperties = exports.ns("onProperties");
/** The property that determines the property that a property restriction refers to. */
exports.onProperty = exports.ns("onProperty");
/** The property that determines the n-tuple of properties that build a sub property chain of a given property. */
exports.propertyChainAxiom = exports.ns("propertyChainAxiom");
/** The property that determines that two given properties are disjoint. */
exports.propertyDisjointWith = exports.ns("propertyDisjointWith");
/** The property that determines the cardinality of an exact qualified cardinality restriction. */
exports.qualifiedCardinality = exports.ns("qualifiedCardinality");
/** The property that determines that two given individuals are equal. */
exports.sameAs = exports.ns("sameAs");
/** The property that determines the class that an existential property restriction refers to. */
exports.someValuesFrom = exports.ns("someValuesFrom");
/** The property that determines the subject of a negative property assertion. */
exports.sourceIndividual = exports.ns("sourceIndividual");
/** The property that determines the object of a negative object property assertion. */
exports.targetIndividual = exports.ns("targetIndividual");
/** The property that determines the value of a negative data property assertion. */
exports.targetValue = exports.ns("targetValue");
/** The data property that relates every individual to every data value. */
exports.topDataProperty = exports.ns("topDataProperty");
/** The object property that relates every two individuals. */
exports.topObjectProperty = exports.ns("topObjectProperty");
/** The property that determines the collection of classes or data ranges that build a union. */
exports.unionOf = exports.ns("unionOf");
/** The property that determines the collection of facet-value pairs that define a datatype restriction. */
exports.withRestrictions = exports.ns("withRestrictions");
/** The annotation property that indicates that a given ontology is backward compatible with another ontology. */
exports.backwardCompatibleWith = exports.ns("backwardCompatibleWith");
/** The annotation property that indicates that a given entity has been deprecated. */
exports.deprecated = exports.ns("deprecated");
/** The property that is used for importing other ontologies into a given ontology. */
exports.imports = exports.ns("imports");
/** The annotation property that indicates that a given ontology is incompatible with another ontology. */
exports.incompatibleWith = exports.ns("incompatibleWith");
/** The annotation property that indicates the predecessor ontology of a given ontology. */
exports.priorVersion = exports.ns("priorVersion");
/** The annotation property that provides version information for an ontology or another OWL construct. */
exports.versionInfo = exports.ns("versionInfo");
/** The property that identifies the version IRI of an ontology. */
exports.versionIRI = exports.ns("versionIRI");
exports.default = {
    /** Function to create arbitrary terms within the 'The OWL 2 Schema vocabulary (OWL 2)' ontology */
    ns: exports.ns,
    /** The class of collections of pairwise different individuals. */
    AllDifferent: exports.AllDifferent,
    /** The class of collections of pairwise disjoint classes. */
    AllDisjointClasses: exports.AllDisjointClasses,
    /** The class of collections of pairwise disjoint properties. */
    AllDisjointProperties: exports.AllDisjointProperties,
    /** The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object. */
    Annotation: exports.Annotation,
    /** The class of annotation properties. */
    AnnotationProperty: exports.AnnotationProperty,
    /** The class of asymmetric properties. */
    AsymmetricProperty: exports.AsymmetricProperty,
    /** The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object. */
    Axiom: exports.Axiom,
    /** The class of OWL classes. */
    Class: exports.Class,
    /** The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead. */
    DataRange: exports.DataRange,
    /** The class of data properties. */
    DatatypeProperty: exports.DatatypeProperty,
    /** The class of deprecated classes. */
    DeprecatedClass: exports.DeprecatedClass,
    /** The class of deprecated properties. */
    DeprecatedProperty: exports.DeprecatedProperty,
    /** The class of functional properties. */
    FunctionalProperty: exports.FunctionalProperty,
    /** The class of inverse-functional properties. */
    InverseFunctionalProperty: exports.InverseFunctionalProperty,
    /** The class of irreflexive properties. */
    IrreflexiveProperty: exports.IrreflexiveProperty,
    /** The class of named individuals. */
    NamedIndividual: exports.NamedIndividual,
    /** The class of negative property assertions. */
    NegativePropertyAssertion: exports.NegativePropertyAssertion,
    /** This is the empty class. */
    Nothing: exports.Nothing,
    /** The class of object properties. */
    ObjectProperty: exports.ObjectProperty,
    /** The class of ontologies. */
    Ontology: exports.Ontology,
    /** The class of ontology properties. */
    OntologyProperty: exports.OntologyProperty,
    /** The class of reflexive properties. */
    ReflexiveProperty: exports.ReflexiveProperty,
    /** The class of property restrictions. */
    Restriction: exports.Restriction,
    /** The class of symmetric properties. */
    SymmetricProperty: exports.SymmetricProperty,
    /** The class of transitive properties. */
    TransitiveProperty: exports.TransitiveProperty,
    /** The class of OWL individuals. */
    Thing: exports.Thing,
    /** The property that determines the class that a universal property restriction refers to. */
    allValuesFrom: exports.allValuesFrom,
    /** The property that determines the predicate of an annotated axiom or annotated annotation. */
    annotatedProperty: exports.annotatedProperty,
    /** The property that determines the subject of an annotated axiom or annotated annotation. */
    annotatedSource: exports.annotatedSource,
    /** The property that determines the object of an annotated axiom or annotated annotation. */
    annotatedTarget: exports.annotatedTarget,
    /** The property that determines the predicate of a negative property assertion. */
    assertionProperty: exports.assertionProperty,
    /** The data property that does not relate any individual to any data value. */
    bottomDataProperty: exports.bottomDataProperty,
    /** The object property that does not relate any two individuals. */
    bottomObjectProperty: exports.bottomObjectProperty,
    /** The property that determines the cardinality of an exact cardinality restriction. */
    cardinality: exports.cardinality,
    /** The property that determines that a given class is the complement of another class. */
    complementOf: exports.complementOf,
    /** The property that determines that a given data range is the complement of another data range with respect to the data domain. */
    datatypeComplementOf: exports.datatypeComplementOf,
    /** The property that determines that two given individuals are different. */
    differentFrom: exports.differentFrom,
    /** The property that determines that a given class is equivalent to the disjoint union of a collection of other classes. */
    disjointUnionOf: exports.disjointUnionOf,
    /** The property that determines that two given classes are disjoint. */
    disjointWith: exports.disjointWith,
    /** The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom. */
    distinctMembers: exports.distinctMembers,
    /** The property that determines that two given classes are equivalent, and that is used to specify datatype definitions. */
    equivalentClass: exports.equivalentClass,
    /** The property that determines that two given properties are equivalent. */
    equivalentProperty: exports.equivalentProperty,
    /** The property that determines the collection of properties that jointly build a key. */
    hasKey: exports.hasKey,
    /** The property that determines the property that a self restriction refers to. */
    hasSelf: exports.hasSelf,
    /** The property that determines the individual that a has-value restriction refers to. */
    hasValue: exports.hasValue,
    /** The property that determines the collection of classes or data ranges that build an intersection. */
    intersectionOf: exports.intersectionOf,
    /** The property that determines that two given properties are inverse. */
    inverseOf: exports.inverseOf,
    /** The property that determines the cardinality of a maximum cardinality restriction. */
    maxCardinality: exports.maxCardinality,
    /** The property that determines the cardinality of a maximum qualified cardinality restriction. */
    maxQualifiedCardinality: exports.maxQualifiedCardinality,
    /** The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom. */
    members: exports.members,
    /** The property that determines the cardinality of a minimum cardinality restriction. */
    minCardinality: exports.minCardinality,
    /** The property that determines the cardinality of a minimum qualified cardinality restriction. */
    minQualifiedCardinality: exports.minQualifiedCardinality,
    /** The property that determines the class that a qualified object cardinality restriction refers to. */
    onClass: exports.onClass,
    /** The property that determines the data range that a qualified data cardinality restriction refers to. */
    onDataRange: exports.onDataRange,
    /** The property that determines the datatype that a datatype restriction refers to. */
    onDatatype: exports.onDatatype,
    /** The property that determines the collection of individuals or data values that build an enumeration. */
    oneOf: exports.oneOf,
    /** The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to. */
    onProperties: exports.onProperties,
    /** The property that determines the property that a property restriction refers to. */
    onProperty: exports.onProperty,
    /** The property that determines the n-tuple of properties that build a sub property chain of a given property. */
    propertyChainAxiom: exports.propertyChainAxiom,
    /** The property that determines that two given properties are disjoint. */
    propertyDisjointWith: exports.propertyDisjointWith,
    /** The property that determines the cardinality of an exact qualified cardinality restriction. */
    qualifiedCardinality: exports.qualifiedCardinality,
    /** The property that determines that two given individuals are equal. */
    sameAs: exports.sameAs,
    /** The property that determines the class that an existential property restriction refers to. */
    someValuesFrom: exports.someValuesFrom,
    /** The property that determines the subject of a negative property assertion. */
    sourceIndividual: exports.sourceIndividual,
    /** The property that determines the object of a negative object property assertion. */
    targetIndividual: exports.targetIndividual,
    /** The property that determines the value of a negative data property assertion. */
    targetValue: exports.targetValue,
    /** The data property that relates every individual to every data value. */
    topDataProperty: exports.topDataProperty,
    /** The object property that relates every two individuals. */
    topObjectProperty: exports.topObjectProperty,
    /** The property that determines the collection of classes or data ranges that build a union. */
    unionOf: exports.unionOf,
    /** The property that determines the collection of facet-value pairs that define a datatype restriction. */
    withRestrictions: exports.withRestrictions,
    /** The annotation property that indicates that a given ontology is backward compatible with another ontology. */
    backwardCompatibleWith: exports.backwardCompatibleWith,
    /** The annotation property that indicates that a given entity has been deprecated. */
    deprecated: exports.deprecated,
    /** The property that is used for importing other ontologies into a given ontology. */
    imports: exports.imports,
    /** The annotation property that indicates that a given ontology is incompatible with another ontology. */
    incompatibleWith: exports.incompatibleWith,
    /** The annotation property that indicates the predecessor ontology of a given ontology. */
    priorVersion: exports.priorVersion,
    /** The annotation property that provides version information for an ontology or another OWL construct. */
    versionInfo: exports.versionInfo,
    /** The property that identifies the version IRI of an ontology. */
    versionIRI: exports.versionIRI
};
