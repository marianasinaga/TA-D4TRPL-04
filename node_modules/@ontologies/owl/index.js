import { createNS } from "@ontologies/core";
/** Function to create arbitrary terms within the 'The OWL 2 Schema vocabulary (OWL 2)' ontology */
export const ns = createNS("http://www.w3.org/2002/07/owl#");
/** The class of collections of pairwise different individuals. */
export const AllDifferent = ns("AllDifferent");
/** The class of collections of pairwise disjoint classes. */
export const AllDisjointClasses = ns("AllDisjointClasses");
/** The class of collections of pairwise disjoint properties. */
export const AllDisjointProperties = ns("AllDisjointProperties");
/** The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object. */
export const Annotation = ns("Annotation");
/** The class of annotation properties. */
export const AnnotationProperty = ns("AnnotationProperty");
/** The class of asymmetric properties. */
export const AsymmetricProperty = ns("AsymmetricProperty");
/** The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object. */
export const Axiom = ns("Axiom");
/** The class of OWL classes. */
export const Class = ns("Class");
/** The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead. */
export const DataRange = ns("DataRange");
/** The class of data properties. */
export const DatatypeProperty = ns("DatatypeProperty");
/** The class of deprecated classes. */
export const DeprecatedClass = ns("DeprecatedClass");
/** The class of deprecated properties. */
export const DeprecatedProperty = ns("DeprecatedProperty");
/** The class of functional properties. */
export const FunctionalProperty = ns("FunctionalProperty");
/** The class of inverse-functional properties. */
export const InverseFunctionalProperty = ns("InverseFunctionalProperty");
/** The class of irreflexive properties. */
export const IrreflexiveProperty = ns("IrreflexiveProperty");
/** The class of named individuals. */
export const NamedIndividual = ns("NamedIndividual");
/** The class of negative property assertions. */
export const NegativePropertyAssertion = ns("NegativePropertyAssertion");
/** This is the empty class. */
export const Nothing = ns("Nothing");
/** The class of object properties. */
export const ObjectProperty = ns("ObjectProperty");
/** The class of ontologies. */
export const Ontology = ns("Ontology");
/** The class of ontology properties. */
export const OntologyProperty = ns("OntologyProperty");
/** The class of reflexive properties. */
export const ReflexiveProperty = ns("ReflexiveProperty");
/** The class of property restrictions. */
export const Restriction = ns("Restriction");
/** The class of symmetric properties. */
export const SymmetricProperty = ns("SymmetricProperty");
/** The class of transitive properties. */
export const TransitiveProperty = ns("TransitiveProperty");
/** The class of OWL individuals. */
export const Thing = ns("Thing");
/** The property that determines the class that a universal property restriction refers to. */
export const allValuesFrom = ns("allValuesFrom");
/** The property that determines the predicate of an annotated axiom or annotated annotation. */
export const annotatedProperty = ns("annotatedProperty");
/** The property that determines the subject of an annotated axiom or annotated annotation. */
export const annotatedSource = ns("annotatedSource");
/** The property that determines the object of an annotated axiom or annotated annotation. */
export const annotatedTarget = ns("annotatedTarget");
/** The property that determines the predicate of a negative property assertion. */
export const assertionProperty = ns("assertionProperty");
/** The data property that does not relate any individual to any data value. */
export const bottomDataProperty = ns("bottomDataProperty");
/** The object property that does not relate any two individuals. */
export const bottomObjectProperty = ns("bottomObjectProperty");
/** The property that determines the cardinality of an exact cardinality restriction. */
export const cardinality = ns("cardinality");
/** The property that determines that a given class is the complement of another class. */
export const complementOf = ns("complementOf");
/** The property that determines that a given data range is the complement of another data range with respect to the data domain. */
export const datatypeComplementOf = ns("datatypeComplementOf");
/** The property that determines that two given individuals are different. */
export const differentFrom = ns("differentFrom");
/** The property that determines that a given class is equivalent to the disjoint union of a collection of other classes. */
export const disjointUnionOf = ns("disjointUnionOf");
/** The property that determines that two given classes are disjoint. */
export const disjointWith = ns("disjointWith");
/** The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom. */
export const distinctMembers = ns("distinctMembers");
/** The property that determines that two given classes are equivalent, and that is used to specify datatype definitions. */
export const equivalentClass = ns("equivalentClass");
/** The property that determines that two given properties are equivalent. */
export const equivalentProperty = ns("equivalentProperty");
/** The property that determines the collection of properties that jointly build a key. */
export const hasKey = ns("hasKey");
/** The property that determines the property that a self restriction refers to. */
export const hasSelf = ns("hasSelf");
/** The property that determines the individual that a has-value restriction refers to. */
export const hasValue = ns("hasValue");
/** The property that determines the collection of classes or data ranges that build an intersection. */
export const intersectionOf = ns("intersectionOf");
/** The property that determines that two given properties are inverse. */
export const inverseOf = ns("inverseOf");
/** The property that determines the cardinality of a maximum cardinality restriction. */
export const maxCardinality = ns("maxCardinality");
/** The property that determines the cardinality of a maximum qualified cardinality restriction. */
export const maxQualifiedCardinality = ns("maxQualifiedCardinality");
/** The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom. */
export const members = ns("members");
/** The property that determines the cardinality of a minimum cardinality restriction. */
export const minCardinality = ns("minCardinality");
/** The property that determines the cardinality of a minimum qualified cardinality restriction. */
export const minQualifiedCardinality = ns("minQualifiedCardinality");
/** The property that determines the class that a qualified object cardinality restriction refers to. */
export const onClass = ns("onClass");
/** The property that determines the data range that a qualified data cardinality restriction refers to. */
export const onDataRange = ns("onDataRange");
/** The property that determines the datatype that a datatype restriction refers to. */
export const onDatatype = ns("onDatatype");
/** The property that determines the collection of individuals or data values that build an enumeration. */
export const oneOf = ns("oneOf");
/** The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to. */
export const onProperties = ns("onProperties");
/** The property that determines the property that a property restriction refers to. */
export const onProperty = ns("onProperty");
/** The property that determines the n-tuple of properties that build a sub property chain of a given property. */
export const propertyChainAxiom = ns("propertyChainAxiom");
/** The property that determines that two given properties are disjoint. */
export const propertyDisjointWith = ns("propertyDisjointWith");
/** The property that determines the cardinality of an exact qualified cardinality restriction. */
export const qualifiedCardinality = ns("qualifiedCardinality");
/** The property that determines that two given individuals are equal. */
export const sameAs = ns("sameAs");
/** The property that determines the class that an existential property restriction refers to. */
export const someValuesFrom = ns("someValuesFrom");
/** The property that determines the subject of a negative property assertion. */
export const sourceIndividual = ns("sourceIndividual");
/** The property that determines the object of a negative object property assertion. */
export const targetIndividual = ns("targetIndividual");
/** The property that determines the value of a negative data property assertion. */
export const targetValue = ns("targetValue");
/** The data property that relates every individual to every data value. */
export const topDataProperty = ns("topDataProperty");
/** The object property that relates every two individuals. */
export const topObjectProperty = ns("topObjectProperty");
/** The property that determines the collection of classes or data ranges that build a union. */
export const unionOf = ns("unionOf");
/** The property that determines the collection of facet-value pairs that define a datatype restriction. */
export const withRestrictions = ns("withRestrictions");
/** The annotation property that indicates that a given ontology is backward compatible with another ontology. */
export const backwardCompatibleWith = ns("backwardCompatibleWith");
/** The annotation property that indicates that a given entity has been deprecated. */
export const deprecated = ns("deprecated");
/** The property that is used for importing other ontologies into a given ontology. */
export const imports = ns("imports");
/** The annotation property that indicates that a given ontology is incompatible with another ontology. */
export const incompatibleWith = ns("incompatibleWith");
/** The annotation property that indicates the predecessor ontology of a given ontology. */
export const priorVersion = ns("priorVersion");
/** The annotation property that provides version information for an ontology or another OWL construct. */
export const versionInfo = ns("versionInfo");
/** The property that identifies the version IRI of an ontology. */
export const versionIRI = ns("versionIRI");
export default {
    /** Function to create arbitrary terms within the 'The OWL 2 Schema vocabulary (OWL 2)' ontology */
    ns,
    /** The class of collections of pairwise different individuals. */
    AllDifferent,
    /** The class of collections of pairwise disjoint classes. */
    AllDisjointClasses,
    /** The class of collections of pairwise disjoint properties. */
    AllDisjointProperties,
    /** The class of annotated annotations for which the RDF serialization consists of an annotated subject, predicate and object. */
    Annotation,
    /** The class of annotation properties. */
    AnnotationProperty,
    /** The class of asymmetric properties. */
    AsymmetricProperty,
    /** The class of annotated axioms for which the RDF serialization consists of an annotated subject, predicate and object. */
    Axiom,
    /** The class of OWL classes. */
    Class,
    /** The class of OWL data ranges, which are special kinds of datatypes. Note: The use of the IRI owl:DataRange has been deprecated as of OWL 2. The IRI rdfs:Datatype SHOULD be used instead. */
    DataRange,
    /** The class of data properties. */
    DatatypeProperty,
    /** The class of deprecated classes. */
    DeprecatedClass,
    /** The class of deprecated properties. */
    DeprecatedProperty,
    /** The class of functional properties. */
    FunctionalProperty,
    /** The class of inverse-functional properties. */
    InverseFunctionalProperty,
    /** The class of irreflexive properties. */
    IrreflexiveProperty,
    /** The class of named individuals. */
    NamedIndividual,
    /** The class of negative property assertions. */
    NegativePropertyAssertion,
    /** This is the empty class. */
    Nothing,
    /** The class of object properties. */
    ObjectProperty,
    /** The class of ontologies. */
    Ontology,
    /** The class of ontology properties. */
    OntologyProperty,
    /** The class of reflexive properties. */
    ReflexiveProperty,
    /** The class of property restrictions. */
    Restriction,
    /** The class of symmetric properties. */
    SymmetricProperty,
    /** The class of transitive properties. */
    TransitiveProperty,
    /** The class of OWL individuals. */
    Thing,
    /** The property that determines the class that a universal property restriction refers to. */
    allValuesFrom,
    /** The property that determines the predicate of an annotated axiom or annotated annotation. */
    annotatedProperty,
    /** The property that determines the subject of an annotated axiom or annotated annotation. */
    annotatedSource,
    /** The property that determines the object of an annotated axiom or annotated annotation. */
    annotatedTarget,
    /** The property that determines the predicate of a negative property assertion. */
    assertionProperty,
    /** The data property that does not relate any individual to any data value. */
    bottomDataProperty,
    /** The object property that does not relate any two individuals. */
    bottomObjectProperty,
    /** The property that determines the cardinality of an exact cardinality restriction. */
    cardinality,
    /** The property that determines that a given class is the complement of another class. */
    complementOf,
    /** The property that determines that a given data range is the complement of another data range with respect to the data domain. */
    datatypeComplementOf,
    /** The property that determines that two given individuals are different. */
    differentFrom,
    /** The property that determines that a given class is equivalent to the disjoint union of a collection of other classes. */
    disjointUnionOf,
    /** The property that determines that two given classes are disjoint. */
    disjointWith,
    /** The property that determines the collection of pairwise different individuals in a owl:AllDifferent axiom. */
    distinctMembers,
    /** The property that determines that two given classes are equivalent, and that is used to specify datatype definitions. */
    equivalentClass,
    /** The property that determines that two given properties are equivalent. */
    equivalentProperty,
    /** The property that determines the collection of properties that jointly build a key. */
    hasKey,
    /** The property that determines the property that a self restriction refers to. */
    hasSelf,
    /** The property that determines the individual that a has-value restriction refers to. */
    hasValue,
    /** The property that determines the collection of classes or data ranges that build an intersection. */
    intersectionOf,
    /** The property that determines that two given properties are inverse. */
    inverseOf,
    /** The property that determines the cardinality of a maximum cardinality restriction. */
    maxCardinality,
    /** The property that determines the cardinality of a maximum qualified cardinality restriction. */
    maxQualifiedCardinality,
    /** The property that determines the collection of members in either a owl:AllDifferent, owl:AllDisjointClasses or owl:AllDisjointProperties axiom. */
    members,
    /** The property that determines the cardinality of a minimum cardinality restriction. */
    minCardinality,
    /** The property that determines the cardinality of a minimum qualified cardinality restriction. */
    minQualifiedCardinality,
    /** The property that determines the class that a qualified object cardinality restriction refers to. */
    onClass,
    /** The property that determines the data range that a qualified data cardinality restriction refers to. */
    onDataRange,
    /** The property that determines the datatype that a datatype restriction refers to. */
    onDatatype,
    /** The property that determines the collection of individuals or data values that build an enumeration. */
    oneOf,
    /** The property that determines the n-tuple of properties that a property restriction on an n-ary data range refers to. */
    onProperties,
    /** The property that determines the property that a property restriction refers to. */
    onProperty,
    /** The property that determines the n-tuple of properties that build a sub property chain of a given property. */
    propertyChainAxiom,
    /** The property that determines that two given properties are disjoint. */
    propertyDisjointWith,
    /** The property that determines the cardinality of an exact qualified cardinality restriction. */
    qualifiedCardinality,
    /** The property that determines that two given individuals are equal. */
    sameAs,
    /** The property that determines the class that an existential property restriction refers to. */
    someValuesFrom,
    /** The property that determines the subject of a negative property assertion. */
    sourceIndividual,
    /** The property that determines the object of a negative object property assertion. */
    targetIndividual,
    /** The property that determines the value of a negative data property assertion. */
    targetValue,
    /** The data property that relates every individual to every data value. */
    topDataProperty,
    /** The object property that relates every two individuals. */
    topObjectProperty,
    /** The property that determines the collection of classes or data ranges that build a union. */
    unionOf,
    /** The property that determines the collection of facet-value pairs that define a datatype restriction. */
    withRestrictions,
    /** The annotation property that indicates that a given ontology is backward compatible with another ontology. */
    backwardCompatibleWith,
    /** The annotation property that indicates that a given entity has been deprecated. */
    deprecated,
    /** The property that is used for importing other ontologies into a given ontology. */
    imports,
    /** The annotation property that indicates that a given ontology is incompatible with another ontology. */
    incompatibleWith,
    /** The annotation property that indicates the predecessor ontology of a given ontology. */
    priorVersion,
    /** The annotation property that provides version information for an ontology or another OWL construct. */
    versionInfo,
    /** The property that identifies the version IRI of an ontology. */
    versionIRI
};
